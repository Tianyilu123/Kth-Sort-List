// method 1, max heap

class Solution {
    public List<String> topKFrequent(String[] words, int k) {
        HashMap<String, Integer > map = new HashMap<>();
        for (String s : words)  map.put(s, map.getOrDefault(s,0) + 1);  // Frequent hashmap
        
        PriorityQueue<Map.Entry<String,Integer>> maxHeap = new PriorityQueue<>(k, (a,b) -> 
            a.getValue()==b.getValue() ? a.getKey().compareTo(b.getKey()) : b.getValue()-a.getValue()); 
        // if same frequency, then sort alphabetical .  
        
        for (Map.Entry<String,Integer> entry : map.entrySet() ) maxHeap.add(entry);
        
        List<String> res = new ArrayList<>();
        while (res.size() < k) res.add(maxHeap.poll().getKey());  //add top k
        return res;
    }

}

// time: O(nlogn)


//method 2, min heap
class Solution {
    public List<String> topKFrequent(String[] words, int k) {
        
        List<String> result = new LinkedList<>();
        Map<String, Integer> map = new HashMap<>();
        for (String s : words)  map.put(s, map.getOrDefault(s,0) + 1);  // Frequent hashmap
        
        PriorityQueue<Map.Entry<String, Integer>> minHeap = new PriorityQueue<>(
                 (a,b) -> a.getValue()==b.getValue() ? b.getKey().compareTo(a.getKey()) : a.getValue()-b.getValue()
        );
        
        for(Map.Entry<String, Integer> entry: map.entrySet())
        {
            minHeap.offer(entry);
            if(minHeap.size()>k)
                minHeap.poll();
        }

        while(!minHeap.isEmpty())
            result.add(0, minHeap.poll().getKey());
        
        return result;
    }
}

// time: O(nlogK)
// space: O(n)
