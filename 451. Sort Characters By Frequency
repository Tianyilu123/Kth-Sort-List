// method 1 bucket sort
class Solution {
    public String frequencySort(String s) {
        if(s == null || s.length() == 0) return s;
        HashMap<Character, Integer> map = new HashMap<>();
        for(char c : s.toCharArray()) {
            map.put(c, map.getOrDefault(c,0)+1);
        }
        List<Character>[] bucket = new List[s.length() + 1];
        for(char c : map.keySet()) {
            int freq = map.get(c);
            if(bucket[freq] == null) {
                bucket[freq] = new ArrayList<>();
            }
            bucket[freq].add(c);
        }
        StringBuilder sb = new StringBuilder();
        for(int i=bucket.length-1; i>=0; i--) {
            if(bucket[i] != null) {
                for(char c : bucket[i]) {
                    for(int j=0; j<i; j++) {
                        sb.append(c);
                    }
                }
            }
        }
        return sb.toString();
    }
}

// method 2 Heap

class Solution {
    public String frequencySort(String s) {
        HashMap<Character, Integer> map = new HashMap<>();
        char[] cs = s.toCharArray();
        for(char cc : cs) {
            map.put(cc, map.getOrDefault(cc, 0)+1);
        }
        
        PriorityQueue<Map.Entry<Character, Integer>> maxHeap = 
                                new PriorityQueue<>((a,b) -> b.getValue()-a.getValue());
        maxHeap.addAll(map.entrySet());
        
        StringBuilder sb = new StringBuilder();
        while (!maxHeap.isEmpty()) {
            Map.Entry e = maxHeap.poll();
            for (int i = 0; i < (int)e.getValue(); i++) 
                sb.append(e.getKey());
        }
        return sb.toString();
    }
}
