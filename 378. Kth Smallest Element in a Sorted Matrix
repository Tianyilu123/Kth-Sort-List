
// method 1: Heap:

class Solution {
    public int kthSmallest(int[][] matrix, int k) {
        PriorityQueue<Tuple> pq = new PriorityQueue<>(matrix.length, (a,b)->(a.val-b.val));
        for(int i = 0; i<matrix[0].length; i++) {
            pq.offer(new Tuple(0, i, matrix[0][i]));
        }
        for(int i=0; i<k-1; i++) {
            Tuple tuple = pq.poll();
            if(tuple.x == matrix.length-1) continue;
            pq.offer(new Tuple(tuple.x+1, tuple.y, matrix[tuple.x+1][tuple.y]));
        }
        return pq.poll().val;
    }
    
    class Tuple{
        int x, y, val;
        public Tuple(int x, int y, int val) {
            this.x = x;
            this.y = y;
            this.val = val;
        }
    }
}

//O(nlogn), O(n);


// method 2: Binary Search

public class Solution {
    public int kthSmallest(int[][] matrix, int k) {
        int lo = matrix[0][0], hi = matrix[matrix.length - 1][matrix[0].length - 1] + 1;//[lo, hi)
        while(lo < hi) {
            int mid = lo + (hi - lo) / 2;
            int count = 0,  j = matrix[0].length - 1;
            for(int i = 0; i < matrix.length; i++) {
                while(j >= 0 && matrix[i][j] > mid) j--;
                count += (j + 1);
            }
            if(count < k) lo = mid + 1;
            else hi = mid;
        }
        return lo;
    }
}
// O(n*log(max - min)), O(1)
