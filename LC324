
class Solution {
    public void wiggleSort(int[] nums) {
        if(nums == null || nums.length <= 1) return;
        int len = nums.length;
        int k = len/2;
        int pivot = findKth(nums, 0, len-1, k);
        
        int start = 0, end = len-1, i=0;
        
        while(i <= end) {
            int val = nums[(1+2*i)%(len | 1)];
            if(val > pivot) {
                swap(nums, index(start++, len), index(i++, len));
            } else if(val < pivot) {
                swap(nums, index(i, len), index(end--, len));
            } else {
                i++;
            }
        }
    }
    
    private int index(int i, int len) {
        return(1+2*i)%(len | 1);
    }
    
    private int findKth(int[] nums, int start, int end, int k) {
        if(start > end) return -1;
        if(start == end) return nums[start];
        
        int pivot = partition(nums, start, end);
        int rank = pivot - start + 1;
        
        if(rank == k) {
            return nums[pivot];
        } else if(rank < k) {
            return findKth(nums, pivot+1, end, k-rank);
        } else {
            return findKth(nums, start, pivot-1, k);
        }
    }
    
    private int partition(int[] nums, int start, int end) {
        int pivot = nums[end];
        
        int left = start-1;
        for(int i=start; i<end; i++) {
            if(nums[i] >= pivot) {
                swap(nums, ++left, i);
            }
        }
        
        swap(nums, ++left, end);
        return left;
    }
    
    private void swap(int[] nums, int i,int j) {
        int tmp = nums[i];
        nums[i] = nums[j];
        nums[j] = tmp;
    }
}


//题解：
当 i 是奇数时，若nums[i] < nums[i-1], 互换。

当 i 是偶数时，若nums[i] > nums[i-1], 互换。

Time Complexity: O(n). Space: O(1).
