// method 1: quick sort:

class Solution {
    public int findKthLargest(int[] nums, int k) {
        return search(nums, 0, nums.length-1, k);
    }
    
    private int search(int[] nums, int left, int right, int k) {
        if(left == right) {
            return nums[left];
        }
        
        int q = partition(nums, left, right);
        int rank = q - left + 1;
        if(rank == k) {
            return nums[q];
        } else if(rank > k) {
            return search(nums, left, q-1, k);
        } else {
            return search(nums, q+1, right, k-rank);
        }
    }
    
    private int partition(int[] nums, int left, int right) {
        int pivotIndex = right, pivot = nums[pivotIndex];
        int i = left;
        for(int j=left; j<right; j++) {
            if(nums[j] > pivot) {
                swap(nums, i, j);
                i++;
            }
        }
        swap(nums, i, right);
        return i;
    }
    
    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}

// O(n) - O(n^2), O(1)


// method 2: heap:

class Solution {
    public int findKthLargest(int[] nums, int k) {
        if(nums == null || nums.length == 0) return 0;
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        int res = 0;
        for(int num : nums) {
            minHeap.offer(num);
            if(minHeap.size() > k) {
                minHeap.poll();
            }
        }
        return minHeap.poll();
    }
}

//O(nlogk), O(n)
