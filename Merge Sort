
// method 1: time O(nlogn), space (O(nlogn)
class MergeSort {
    public ArrayList<Integer> MergeSort(ArrayList<Integer> array) {
        if(array == null || array.length<=1) return array;
        return divide (array, 0, array.size()-1);
    }
    
    // time: O(n) == O(2^logn-1)
    private ArrayList<Integer> divide (ArrayList<Integer> array, int left, int right) {
        
        if(left == right) {
            ArrayList<Integer> res = new ArrayList<>();
            res.add(array.get(left));
            return res;
        }
        
        int mid = (right-left)/2 + left;
        ArrayList<Integer> left = devide (array, left, mid);
        ArrayList<Integer> right = devide (array, mid+1, right);
        return merge(left, right);
    }
    
    // time: O(nlogn)
    private void merge(ArrayList<Integer> left, ArrayList<Integer> right) {
        ArrayList<Integer> res = new ArrayList<>();
        int leftIdx = 0;
        int rightIdx = 0;
        
        while(leftIdx < left.size() && rightIdx < right.size()) {
            if(left.get(leftIdx) < right.get(rightIdx)) {
                res.add(left.get(leftIdx++));
            } else {
                res.add(right.get(rightIdx++));
            }
        }
        // remaining elements on the left side
        while(leftIdx < left.size()) {
            res.add(left.get(leftIdx++));
        }
        
        while(rightIdx < right.size()) {
            res.add(right.get(rightIdx++));
        }
        return res;
    }
}


// method 2: time: O(nlogn), space: O(n)
class MergeSort {
    public int[] divide(int[] array) {
        if(array == null || array.length<=1) return array;
        int[] helper = new int[array.length];
        divide(array, helper, 0, array.length-1);
        return array;
    }
    
    private void divide(int[] array, int[] helper, int left, int right) {
        if(left == right) return;
        int mid = left + (right-left)/2;
        divide(array, helper, left, mid);
        divide(array, helper, mid+1, right);
        merge(array, helper, left, mid, right);
    }
    
    private void merge(int[] array, int[] helper, int left, int mid, int right) {
        for(int i=left; i<=right; i++) {
            helper[i] = array[i];
        }
        
        int leftIdx = left;
        int rightIdx = mid+1;
        
        while(leftIdx<=mid && rightIdx<= right) {
            if(helper[leftIdx] < helper[rightIdx]) {
                array[left++] = helper[leftIdx++];
            } else {
                array[left++] = helper[rightIdx++];
            }
        }
        
        while(leftIdx <= mid) {
            array[left++] = helper[leftIdx++];
        }
        
        while(rightIdx <= right) {
            array[left++] = helper[rightIdx++];
        }
    }
}
