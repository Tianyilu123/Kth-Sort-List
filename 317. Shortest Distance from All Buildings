
class Solution {
    public int shortestDistance(int[][] grid) {
        if(grid == null || grid.length == 0)
            return -1;
        int[][] cost = new int[grid.length][grid[0].length];
        
        for(int i=0; i<grid.length; i++) {
            for(int j=0; j<grid[0].length; j++) {
                if(grid[i][j] == 1) {
                    bfs(grid, cost, i, j);
                }
            }
        }
        
        int minDis = Integer.MAX_VALUE;
        for(int i=0; i<cost.length; i++) {
            for(int j=0; j<cost[0].length; j++) {
                if(grid[i][j] == 0 && cost[i][j] != 0) {
                    minDis = Math.min(cost[i][j], minDis);
                }
            }
        }
        return minDis == Integer.MAX_VALUE ? -1 : minDis;
    }
    
    private void bfs(int[][] grid, int[][] cost, int i, int j) {
        int row = grid.length, col = grid[0].length;
        int[][] dirs = {{-1,0},{1,0},{0,-1},{0,1}};
        
        boolean[][] visited = new boolean[row][col];
        Queue<int[]> myQueue = new LinkedList<>();
        
        myQueue.offer(new int[]{i,j});
        visited[i][j] = true;
        int distance = 0;
        
        while(!myQueue.isEmpty()) {
            int size = myQueue.size();
            while(size-- >0) {
                int[] cur = myQueue.poll();
                cost[cur[0]][cur[1]] += distance;
                
                for(int[] dir : dirs) {
                    int rowIdx = cur[0] + dir[0];
                    int colIdx = cur[1] + dir[1];
                    if(rowIdx<row && rowIdx>=0 && colIdx<col && colIdx>=0 
                      && grid[rowIdx][colIdx] == 0 && visited[rowIdx][colIdx] == false) {
                        myQueue.offer(new int[]{rowIdx, colIdx});
                        visited[rowIdx][colIdx] = true;
                    }
                }
            }
            distance++;
        }
        
        for(int idxI=0; idxI<row; idxI++) {
            for(int idxJ=0; idxJ<col; idxJ++) {
                if(grid[idxI][idxJ] == 0 && !visited[idxI][idxJ]) {
                    grid[idxI][idxJ] = 2;
                }
            }
        }
    }
}

// O(m^2 * n^2), O(m*n)
